From 26e28d363f4b86c5714641348cacac5db6a74654 Mon Sep 17 00:00:00 2001
From: fis <ybbs.daans@hotmail.com>
Date: Thu, 6 Sep 2018 15:00:26 +0800
Subject: [PATCH 2/2] Add CUDA flags.

---
 src/clang_complete.cc                 | 27 ++++++++++++++++++++++--
 src/clang_indexer.cc                  | 14 +++++++++----
 src/clang_system_include_extractor.cc |  9 ++++----
 src/command_line.cc                   |  1 +
 src/config.h                          |  2 +-
 src/diagnostics_engine.cc             |  5 ++++-
 src/iindexer.cc                       | 13 ++++++------
 src/import_pipeline.cc                | 10 ++++-----
 src/platform_posix.cc                 |  1 +
 src/project.cc                        | 30 +++++++++++++++++++++------
 src/utils.cc                          |  2 +-
 11 files changed, 84 insertions(+), 30 deletions(-)

diff --git a/src/clang_complete.cc b/src/clang_complete.cc
index aeaec79b..a02f00f0 100644
--- a/src/clang_complete.cc
+++ b/src/clang_complete.cc
@@ -386,6 +386,25 @@ void BuildDetailString(CXCompletionString completion_string,
   }
 }
 
+void ShowDiag(std::unique_ptr<ClangTranslationUnit>* tu,
+              std::shared_ptr<CompletionSession> session) {
+  unsigned num_diagnostics = clang_getNumDiagnostics((*tu)->cx_tu);
+  std::vector<lsDiagnostic> ls_diagnostics;
+  for (unsigned i = 0; i < num_diagnostics; ++i) {
+    optional<lsDiagnostic> diagnostic = BuildAndDisposeDiagnostic(
+        clang_getDiagnostic((*tu)->cx_tu, i), session->file.filename);
+    // Filter messages like "too many errors emitted, stopping now
+    // [-ferror-limit=]" which has line = 0 and got subtracted by 1 after
+    // conversion to lsDiagnostic
+    if (diagnostic && diagnostic->range.start.line >= 0) {
+      ls_diagnostics.push_back(*diagnostic);
+    }
+    for (auto diag : ls_diagnostics) {
+      LOG_S(INFO) << "ShowDiag: " << diag.message;
+    }
+  }
+}
+
 void TryEnsureDocumentParsed(ClangCompleteManager* manager,
                              std::shared_ptr<CompletionSession> session,
                              std::unique_ptr<ClangTranslationUnit>* tu,
@@ -411,7 +430,7 @@ void TryEnsureDocumentParsed(ClangCompleteManager* manager,
               << StringJoin(args, " ");
   *tu = ClangTranslationUnit::Create(index, session->file.filename, args,
                                      unsaved, Flags());
-
+  ShowDiag(tu, session);
   // Build diagnostics.
   if (emit_diagnostics && g_config->diagnostics.onParse && *tu) {
     // If we're emitting diagnostics, do an immediate reparse, otherwise we will
@@ -431,8 +450,12 @@ void TryEnsureDocumentParsed(ClangCompleteManager* manager,
       // Filter messages like "too many errors emitted, stopping now
       // [-ferror-limit=]" which has line = 0 and got subtracted by 1 after
       // conversion to lsDiagnostic
-      if (diagnostic && diagnostic->range.start.line >= 0)
+      if (diagnostic && diagnostic->range.start.line >= 0) {
         ls_diagnostics.push_back(*diagnostic);
+      }
+      for (auto diag : ls_diagnostics) {
+        LOG_S(INFO) << "TryEnsureDocumentParsed: " << diag.message;
+      }
     }
     manager->on_diagnostic_(session->file.filename, ls_diagnostics);
   }
diff --git a/src/clang_indexer.cc b/src/clang_indexer.cc
index b21cfb9f..d12c69b4 100644
--- a/src/clang_indexer.cc
+++ b/src/clang_indexer.cc
@@ -865,8 +865,10 @@ void OnIndexDiagnostic(CXClientData client_data,
     // Check to see if we have already reported this diagnostic, as sometimes
     // libclang will report the same diagnostic twice. See
     // https://github.com/cquery-project/cquery/issues/594 for a repro.
-    if (ls_diagnostic && !ContainsValue(db->diagnostics_, *ls_diagnostic))
+    if (ls_diagnostic && !ContainsValue(db->diagnostics_, *ls_diagnostic)) {
       db->diagnostics_.push_back(*ls_diagnostic);
+      LOG_S(INFO) << "Diag message: " << ls_diagnostic->message;
+    }
   }
 }
 
@@ -2199,13 +2201,17 @@ optional<std::vector<std::unique_ptr<IndexFile>>> Parse(
   if (!g_config->index.enabled)
     return nullopt;
 
+
   optional<AbsolutePath> file = NormalizePath(file0);
+
   if (!file) {
     LOG_S(WARNING) << "Cannot index " << file0
                    << " because it can not be found";
     return nullopt;
   }
 
+  LOG_S(INFO) << "File: " << file->path << "\nArgs:\n" << StringJoin(args, " ");
+
   std::vector<CXUnsavedFile> unsaved_files;
   for (const FileContents& contents : file_contents) {
     CXUnsavedFile unsaved;
@@ -2218,7 +2224,7 @@ optional<std::vector<std::unique_ptr<IndexFile>>> Parse(
   std::unique_ptr<ClangTranslationUnit> tu = ClangTranslationUnit::Create(
       index, file->path, args, unsaved_files,
       CXTranslationUnit_KeepGoing |
-          CXTranslationUnit_DetailedPreprocessingRecord);
+      CXTranslationUnit_DetailedPreprocessingRecord);
   if (!tu)
     return nullopt;
 
@@ -2251,8 +2257,8 @@ optional<std::vector<std::unique_ptr<IndexFile>>> Parse(
   int index_result = clang_indexTranslationUnit(
       index_action, &param, &callback, sizeof(IndexerCallbacks),
       CXIndexOpt_IndexFunctionLocalSymbols |
-          CXIndexOpt_SkipParsedBodiesInSession |
-          CXIndexOpt_IndexImplicitTemplateInstantiations,
+      CXIndexOpt_SkipParsedBodiesInSession |
+      CXIndexOpt_IndexImplicitTemplateInstantiations,
       tu->cx_tu);
   if (index_result != CXError_Success) {
     LOG_S(ERROR) << "Indexing " << *file
diff --git a/src/clang_system_include_extractor.cc b/src/clang_system_include_extractor.cc
index 2e8a252d..46707778 100644
--- a/src/clang_system_include_extractor.cc
+++ b/src/clang_system_include_extractor.cc
@@ -85,12 +85,13 @@ std::vector<std::string> FindSystemIncludeDirectories(
 
     AddRange(&flags, extra_flags);
 
-    LOG_S(INFO) << "Running " << StringJoin(flags, " ");
+    LOG_S(WARNING) << "Running " << StringJoin(flags, " ");
     optional<std::string> clang_output = RunExecutable(flags, "");
-    if (!clang_output || clang_output->empty())
+    if (!clang_output || clang_output->empty()) {
+      LOG_S(INFO) << "Empty output";
       continue;
-
-    LOG_S(INFO) << "Output:\n" << Trim(*clang_output);
+    }
+    // LOG_S(INFO) << "Output:\n" << StringJoin(flags, " ") << "\n" << Trim(*clang_output);
     std::vector<std::string> paths = ExtractSystemIncludePaths(*clang_output);
     if (!paths.empty())
       return paths;
diff --git a/src/command_line.cc b/src/command_line.cc
index 66842e67..59a4bc3f 100644
--- a/src/command_line.cc
+++ b/src/command_line.cc
@@ -394,6 +394,7 @@ int main(int argc, char** argv, const char** env) {
       ParseOptions(argc, argv);
 
   // Setup logging ASAP.
+  // loguru::add_file("/tmp/cquery-log", loguru::Append, loguru::Verbosity_MAX);
   if (HasOption(options, "--log-file")) {
     loguru::add_file(options["--log-file"].c_str(), loguru::Truncate,
                      loguru::Verbosity_MAX);
diff --git a/src/config.h b/src/config.h
index 3867ffe5..7c39cda4 100644
--- a/src/config.h
+++ b/src/config.h
@@ -148,7 +148,7 @@ struct Config {
     // auto-completion. An example value is { ".h", ".hpp" }
     //
     // This is significantly faster than using a regex.
-    std::vector<std::string> includeSuffixWhitelist = {".h", ".hpp", ".hh"};
+    std::vector<std::string> includeSuffixWhitelist = {".h", ".hpp", ".hh", ".cuh"};
 
     // Regex patterns to match include completion candidates against. They
     // receive the absolute file path.
diff --git a/src/diagnostics_engine.cc b/src/diagnostics_engine.cc
index 3e7ce0f7..14dcb848 100644
--- a/src/diagnostics_engine.cc
+++ b/src/diagnostics_engine.cc
@@ -1,7 +1,7 @@
 #include "diagnostics_engine.h"
 
 #include "queue_manager.h"
-
+#include <loguru.hpp>
 #include <chrono>
 
 void DiagnosticsEngine::Init() {
@@ -13,6 +13,9 @@ void DiagnosticsEngine::Init() {
 void DiagnosticsEngine::Publish(WorkingFiles* working_files,
                                 std::string path,
                                 std::vector<lsDiagnostic> diagnostics) {
+  for (auto diag: diagnostics) {
+    LOG_S(INFO) << "Publish:: Diag msg: " << diag.message;
+  }
   // Cache diagnostics so we can show fixits.
   working_files->DoActionOnFile(path, [&](WorkingFile* working_file) {
     if (working_file)
diff --git a/src/iindexer.cc b/src/iindexer.cc
index 29c03e1a..cfba30a4 100644
--- a/src/iindexer.cc
+++ b/src/iindexer.cc
@@ -1,16 +1,17 @@
 #include "iindexer.h"
 
 #include "indexer.h"
-
+#include <memory>
+#include <vector>
 namespace {
 struct ClangIndexer : IIndexer {
   ~ClangIndexer() override = default;
 
-  optional<std::vector<std::unique_ptr<IndexFile>>> Index(
-      FileConsumerSharedState* file_consumer_shared,
-      std::string file,
-      const std::vector<std::string>& args,
-      const std::vector<FileContents>& file_contents) override {
+  optional<std::vector<std::unique_ptr<IndexFile>>>
+  Index(FileConsumerSharedState* file_consumer_shared,
+        std::string file,
+        const std::vector<std::string>& args,
+        const std::vector<FileContents>& file_contents) override {
     return Parse(file_consumer_shared, file, args, file_contents, &index,
                  false /*dump_ast*/);
   }
diff --git a/src/import_pipeline.cc b/src/import_pipeline.cc
index 9165d138..81c4b9d2 100644
--- a/src/import_pipeline.cc
+++ b/src/import_pipeline.cc
@@ -256,8 +256,8 @@ CacheLoadResult TryLoadFromCache(
     if (!file_consumer_shared->Mark(dependency))
       continue;
 
-    LOG_S(INFO) << "Emitting index result for " << dependency << " (via "
-                << previous_index->path << ")";
+    // LOG_S(INFO) << "Emitting index result for " << dependency << " (via "
+    //             << previous_index->path << ")";
 
     std::unique_ptr<IndexFile> dependency_index =
         cache_manager->TryTakeOrLoad(dependency);
@@ -363,7 +363,7 @@ void ParseFile(DiagnosticsEngine* diag_engine,
 
     // When main thread does IdMap request it will request the previous index if
     // needed.
-    LOG_S(INFO) << "Emitting index result for " << new_index->path;
+    // LOG_S(INFO) << "Emitting index result for " << new_index->path;
     result.push_back(Index_DoIdMap(std::move(new_index), request.cache_manager,
                                    request.is_interactive,
                                    true /*write_to_disk*/));
@@ -389,8 +389,8 @@ void ParseFile(DiagnosticsEngine* diag_engine,
   // Write index to disk if requested.
   for (Index_DoIdMap& request : result) {
     if (request.write_to_disk) {
-      LOG_S(INFO) << "Writing cached index to disk for "
-                  << request.current->path;
+      // LOG_S(INFO) << "Writing cached index to disk for "
+      //             << request.current->path;
       request.cache_manager->WriteToCache(*request.current);
       timestamp_manager->UpdateCachedModificationTime(
           request.current->path, request.current->last_modification_time);
diff --git a/src/platform_posix.cc b/src/platform_posix.cc
index d0c6ad9d..119aa51c 100644
--- a/src/platform_posix.cc
+++ b/src/platform_posix.cc
@@ -164,6 +164,7 @@ AbsolutePath GetWorkingDirectory() {
 optional<AbsolutePath> NormalizePath(const std::string& path,
                                      bool ensure_exists,
                                      bool force_lower_on_windows) {
+  // LOG_S(INFO) << "Normalizing: " << path;
   return RealPathNotExpandSymlink(path, ensure_exists);
 }
 
diff --git a/src/project.cc b/src/project.cc
index 5fb7a9c5..9994cdde 100644
--- a/src/project.cc
+++ b/src/project.cc
@@ -153,11 +153,12 @@ const std::vector<std::string>& GetSystemIncludes(
       if (flag == to_pass_flag)
         extra_flags.push_back(flag);
     }
+    if (StartsWith(flag, "--cuda-gpu-arch") && language == LanguageId::Cuda) {
+      extra_flags.push_back(flag);
+    }
   }
 
-  std::vector<std::string> compiler_drivers = {
-      GetExecutablePathNextToCqueryBinary("cquery-clang").path, "clang++",
-      "g++"};
+  std::vector<std::string> compiler_drivers = {"clang++", "g++"};
   if (IsAbsolutePath(compiler_driver)) {
     compiler_drivers.insert(compiler_drivers.begin(), compiler_driver);
   }
@@ -256,14 +257,19 @@ Project::Entry GetCompilationEntryFromCompileCommandEntry(
     assert(!path.empty());
     if (entry.directory.empty() || IsAbsolutePath(path)) {
       // We still want to normalize, as the path may contain .. characters.
+      // LOG_S(INFO) << "Normalizing: " << path;
       return config->normalization_cache.Get(path);
     }
-    if (EndsWith(entry.directory, "/"))
+    if (EndsWith(entry.directory, "/")) {
+      // LOG_S(INFO) << "Normalizing: " << path;
       return config->normalization_cache.Get(entry.directory + path);
+    }
+    // LOG_S(INFO) << "Normalizing: " << path;
     return config->normalization_cache.Get(entry.directory + "/" + path);
   };
 
   Project::Entry result;
+  // LOG_S(INFO) << "Normalizing: " << entry.file;
   result.filename = config->normalization_cache.Get(entry.file);
   const std::string base_name = GetBaseName(entry.file);
 
@@ -331,8 +337,11 @@ Project::Entry GetCompilationEntryFromCompileCommandEntry(
 
   // Compiler driver. If it looks like a path normalize it.
   std::string compiler_driver = args[i - 1];
-  if (FindAnyPartial(compiler_driver, {"/", ".."}))
+  if (FindAnyPartial(compiler_driver, {"/", ".."})) {
+  // LOG_S(INFO) << "Clean up: " << compiler_driver;
     compiler_driver = cleanup_maybe_relative_path(compiler_driver).path;
+
+  }
   result.args.push_back(compiler_driver);
 
   // Add -working-directory if not provided.
@@ -369,6 +378,7 @@ Project::Entry GetCompilationEntryFromCompileCommandEntry(
     // Finish processing path for the previous argument, which was a switch.
     // {"-I", "foo"} style.
     if (next_flag_is_path) {
+      // LOG_S(INFO) << "Clean up " << arg;
       AbsolutePath normalized_arg = cleanup_maybe_relative_path(arg);
       if (add_next_flag_to_quote_dirs)
         config->quote_dirs.insert(Directory(normalized_arg));
@@ -394,6 +404,7 @@ Project::Entry GetCompilationEntryFromCompileCommandEntry(
         // {"-Ifoo"} style.
         if (StartsWith(arg, flag_type)) {
           assert(arg != flag_type);
+          // LOG_S(INFO) << "Clean up: " << arg.substr(flag_type.size());
           AbsolutePath path =
               cleanup_maybe_relative_path(arg.substr(flag_type.size()));
           if (clang_cl || StartsWithAny(arg, kNormalizePathArgs))
@@ -405,13 +416,18 @@ Project::Entry GetCompilationEntryFromCompileCommandEntry(
           break;
         }
       }
+      if (StartsWith(arg, "--cuda-gpu-arch")) {
+        result.args.push_back(arg);
+      }
 
       // This is most likely the file path we will be passing to clang. The
       // path needs to be absolute, otherwise clang_codeCompleteAt is extremely
       // slow. See
       // https://github.com/cquery-project/cquery/commit/af63df09d57d765ce12d40007bf56302a0446678.
-      if (EndsWith(arg, base_name))
+      if (EndsWith(arg, base_name)) {
+        // LOG_S(INFO) << "Clean up: " << arg;
         arg = cleanup_maybe_relative_path(arg).path;
+      }
       // TODO Exclude .a .o to make link command in compile_commands.json work.
       // Also, clang_parseTranslationUnit2FullArgv does not seem to accept
       // multiple source filenames.
@@ -608,6 +624,7 @@ std::vector<Project::Entry> LoadCompilationEntriesFromDirectory(
   CXCompilationDatabase cx_db = nullptr;
 
   if (!IsAbsolutePath(comp_db_dir)) {
+    // LOG_S(INFO) << "Normalizing: " << project->project_dir + comp_db_dir;
     comp_db_dir =
         project->normalization_cache.Get(project->project_dir + comp_db_dir);
   }
@@ -679,6 +696,7 @@ std::vector<Project::Entry> LoadCompilationEntriesFromDirectory(
     } else {
       absolute_filename = directory + "/" + relative_filename;
     }
+    LOG_S(INFO) << "Normalizing: " << absolute_filename;
     entry.file = project->normalization_cache.Get(absolute_filename);
 
     result.push_back(
diff --git a/src/utils.cc b/src/utils.cc
index 1a07b980..8aed1ade 100644
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -295,7 +295,7 @@ bool FileExists(const std::string& filename) {
 }
 
 optional<std::string> ReadContent(const AbsolutePath& filename) {
-  LOG_S(INFO) << "Reading " << filename;
+  // LOG_S(INFO) << "Reading " << filename;
   std::ifstream cache;
   cache.open(filename.path);
 
-- 
2.19.0

