From f9ec783a10754e7a4050787c79a9f5c924f92d74 Mon Sep 17 00:00:00 2001
From: fis <ybbs.daans@hotmail.com>
Date: Thu, 20 Sep 2018 14:45:59 +1200
Subject: [PATCH] Add CUDA path params.

---
 include/clang/Driver/Options.td |   6 ++
 lib/Driver/ToolChains/Cuda.cpp  | 135 ++++++++++++++++++--------------
 lib/Driver/ToolChains/Cuda.h    |   2 +
 3 files changed, 86 insertions(+), 57 deletions(-)

diff --git a/include/clang/Driver/Options.td b/include/clang/Driver/Options.td
index 7da45d2774..950c5d9103 100644
--- a/include/clang/Driver/Options.td
+++ b/include/clang/Driver/Options.td
@@ -574,6 +574,12 @@ def no_cuda_version_check : Flag<["--"], "no-cuda-version-check">,
 def no_cuda_noopt_device_debug : Flag<["--"], "no-cuda-noopt-device-debug">;
 def cuda_path_EQ : Joined<["--"], "cuda-path=">, Group<i_Group>,
   HelpText<"CUDA installation path">;
+def cuda_bin_path_EQ : Joined<["--"], "cuda-bin-path=">, Group<i_Group>,
+  HelpText<"CUDA bin path">;
+def cuda_inc_path_EQ : Joined<["--"], "cuda-inc-path=">, Group<i_Group>,
+  HelpText<"CUDA include path">;
+def cuda_libdevice_path_EQ : Joined<["--"], "cuda-libdevice-path=">, Group<i_Group>,
+  HelpText<"CUDA libdevice path">;
 def cuda_path_ignore_env : Flag<["--"], "cuda-path-ignore-env">, Group<i_Group>,
   HelpText<"Ignore environment variables to detect CUDA installation">;
 def ptxas_path_EQ : Joined<["--"], "ptxas-path=">, Group<i_Group>,
diff --git a/lib/Driver/ToolChains/Cuda.cpp b/lib/Driver/ToolChains/Cuda.cpp
index 7fb4ae4ea9..56b8cac968 100644
--- a/lib/Driver/ToolChains/Cuda.cpp
+++ b/lib/Driver/ToolChains/Cuda.cpp
@@ -25,6 +25,8 @@
 #include "llvm/Support/Program.h"
 #include <system_error>
 
+#include <iostream>
+
 using namespace clang::driver;
 using namespace clang::driver::toolchains;
 using namespace clang::driver::tools;
@@ -66,6 +68,21 @@ CudaInstallationDetector::CudaInstallationDetector(
     const Driver &D, const llvm::Triple &HostTriple,
     const llvm::opt::ArgList &Args)
     : D(D) {
+
+  if (Args.hasArg(options::OPT_cuda_libdevice_path_EQ) &&
+      Args.hasArg(options::OPT_cuda_inc_path_EQ) &&
+      Args.hasArg(options::OPT_cuda_bin_path_EQ)) {
+    BinPath = Args.getLastArgValue(options::OPT_cuda_bin_path_EQ).str();
+    IncludePath = Args.getLastArgValue(options::OPT_cuda_inc_path_EQ).str();
+    LibDevicePath = Args.getLastArgValue(options::OPT_cuda_libdevice_path_EQ).str();
+
+    Version = CudaVersion::CUDA_91;
+    this->InitDeviceMap();
+    IsValid = true;
+    return;
+  }
+
+  // Detect installation by --cuda-path
   struct Candidate {
     std::string Path;
     bool StrictChecking;
@@ -158,63 +175,7 @@ CudaInstallationDetector::CudaInstallationDetector(
     } else {
       Version = ParseCudaVersionFile((*VersionFile)->getBuffer());
     }
-
-    if (Version >= CudaVersion::CUDA_90) {
-      // CUDA-9+ uses single libdevice file for all GPU variants.
-      std::string FilePath = LibDevicePath + "/libdevice.10.bc";
-      if (FS.exists(FilePath)) {
-        for (const char *GpuArchName :
-             {"sm_30", "sm_32", "sm_35", "sm_37", "sm_50", "sm_52", "sm_53",
-              "sm_60", "sm_61", "sm_62", "sm_70", "sm_72"}) {
-          const CudaArch GpuArch = StringToCudaArch(GpuArchName);
-          if (Version >= MinVersionForCudaArch(GpuArch) &&
-              Version <= MaxVersionForCudaArch(GpuArch))
-            LibDeviceMap[GpuArchName] = FilePath;
-        }
-      }
-    } else {
-      std::error_code EC;
-      for (llvm::sys::fs::directory_iterator LI(LibDevicePath, EC), LE;
-           !EC && LI != LE; LI = LI.increment(EC)) {
-        StringRef FilePath = LI->path();
-        StringRef FileName = llvm::sys::path::filename(FilePath);
-        // Process all bitcode filenames that look like
-        // libdevice.compute_XX.YY.bc
-        const StringRef LibDeviceName = "libdevice.";
-        if (!(FileName.startswith(LibDeviceName) && FileName.endswith(".bc")))
-          continue;
-        StringRef GpuArch = FileName.slice(
-            LibDeviceName.size(), FileName.find('.', LibDeviceName.size()));
-        LibDeviceMap[GpuArch] = FilePath.str();
-        // Insert map entries for specific devices with this compute
-        // capability. NVCC's choice of the libdevice library version is
-        // rather peculiar and depends on the CUDA version.
-        if (GpuArch == "compute_20") {
-          LibDeviceMap["sm_20"] = FilePath;
-          LibDeviceMap["sm_21"] = FilePath;
-          LibDeviceMap["sm_32"] = FilePath;
-        } else if (GpuArch == "compute_30") {
-          LibDeviceMap["sm_30"] = FilePath;
-          if (Version < CudaVersion::CUDA_80) {
-            LibDeviceMap["sm_50"] = FilePath;
-            LibDeviceMap["sm_52"] = FilePath;
-            LibDeviceMap["sm_53"] = FilePath;
-          }
-          LibDeviceMap["sm_60"] = FilePath;
-          LibDeviceMap["sm_61"] = FilePath;
-          LibDeviceMap["sm_62"] = FilePath;
-        } else if (GpuArch == "compute_35") {
-          LibDeviceMap["sm_35"] = FilePath;
-          LibDeviceMap["sm_37"] = FilePath;
-        } else if (GpuArch == "compute_50") {
-          if (Version >= CudaVersion::CUDA_80) {
-            LibDeviceMap["sm_50"] = FilePath;
-            LibDeviceMap["sm_52"] = FilePath;
-            LibDeviceMap["sm_53"] = FilePath;
-          }
-        }
-      }
-    }
+    this->InitDeviceMap();
 
     // Check that we have found at least one libdevice that we can link in if
     // -nocudalib hasn't been specified.
@@ -226,6 +187,65 @@ CudaInstallationDetector::CudaInstallationDetector(
   }
 }
 
+void CudaInstallationDetector::InitDeviceMap() {
+  auto &FS = D.getVFS();
+  if (Version >= CudaVersion::CUDA_90) {
+    // CUDA-9+ uses single libdevice file for all GPU variants.
+    std::string FilePath = LibDevicePath + "/libdevice.10.bc";
+    if (FS.exists(FilePath)) {
+      for (const char *GpuArchName :
+               {"sm_30", "sm_32", "sm_35", "sm_37", "sm_50", "sm_52", "sm_53",
+                     "sm_60", "sm_61", "sm_62", "sm_70", "sm_72"}) {
+        const CudaArch GpuArch = StringToCudaArch(GpuArchName);
+        if (Version >= MinVersionForCudaArch(GpuArch) &&
+            Version <= MaxVersionForCudaArch(GpuArch))
+          LibDeviceMap[GpuArchName] = FilePath;
+      }
+    }
+  } else {
+    std::error_code EC;
+    for (llvm::sys::fs::directory_iterator LI(LibDevicePath, EC), LE;
+         !EC && LI != LE; LI = LI.increment(EC)) {
+      StringRef FilePath = LI->path();
+      StringRef FileName = llvm::sys::path::filename(FilePath);
+      // Process all bitcode filenames that look like
+      // libdevice.compute_XX.YY.bc
+      const StringRef LibDeviceName = "libdevice.";
+      if (!(FileName.startswith(LibDeviceName) && FileName.endswith(".bc")))
+        continue;
+      StringRef GpuArch = FileName.slice(
+          LibDeviceName.size(), FileName.find('.', LibDeviceName.size()));
+      LibDeviceMap[GpuArch] = FilePath.str();
+      // Insert map entries for specific devices with this compute
+      // capability. NVCC's choice of the libdevice library version is
+      // rather peculiar and depends on the CUDA version.
+      if (GpuArch == "compute_20") {
+        LibDeviceMap["sm_20"] = FilePath;
+        LibDeviceMap["sm_21"] = FilePath;
+        LibDeviceMap["sm_32"] = FilePath;
+      } else if (GpuArch == "compute_30") {
+        LibDeviceMap["sm_30"] = FilePath;
+        if (Version < CudaVersion::CUDA_80) {
+          LibDeviceMap["sm_50"] = FilePath;
+          LibDeviceMap["sm_52"] = FilePath;
+          LibDeviceMap["sm_53"] = FilePath;
+        }
+        LibDeviceMap["sm_60"] = FilePath;
+        LibDeviceMap["sm_61"] = FilePath;
+        LibDeviceMap["sm_62"] = FilePath;
+      } else if (GpuArch == "compute_35") {
+        LibDeviceMap["sm_35"] = FilePath;
+        LibDeviceMap["sm_37"] = FilePath;
+      } else if (GpuArch == "compute_50") {
+        if (Version >= CudaVersion::CUDA_80) {
+          LibDeviceMap["sm_50"] = FilePath;
+          LibDeviceMap["sm_52"] = FilePath;
+          LibDeviceMap["sm_53"] = FilePath;
+        }
+      }
+    }
+  }
+}
 void CudaInstallationDetector::AddCudaIncludeArgs(
     const ArgList &DriverArgs, ArgStringList &CC1Args) const {
   if (!DriverArgs.hasArg(options::OPT_nobuiltininc)) {
@@ -613,6 +633,7 @@ void CudaToolChain::addClangTargetOptions(
   std::string LibDeviceFile = CudaInstallation.getLibDeviceFile(GpuArch);
 
   if (LibDeviceFile.empty()) {
+    std::cout << "Empty LibDeviceFile" << std::endl;
     if (DeviceOffloadingKind == Action::OFK_OpenMP &&
         DriverArgs.hasArg(options::OPT_S))
       return;
diff --git a/lib/Driver/ToolChains/Cuda.h b/lib/Driver/ToolChains/Cuda.h
index 01580cb669..6996dd1142 100644
--- a/lib/Driver/ToolChains/Cuda.h
+++ b/lib/Driver/ToolChains/Cuda.h
@@ -42,6 +42,8 @@ private:
   // CheckCudaVersionSupportsArch.
   mutable llvm::SmallSet<CudaArch, 4> ArchsWithBadVersion;
 
+  void InitDeviceMap();
+
 public:
   CudaInstallationDetector(const Driver &D, const llvm::Triple &HostTriple,
                            const llvm::opt::ArgList &Args);
-- 
2.19.0

